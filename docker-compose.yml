version: "3.8"

services:
   backend:
      container_name: niterumachi-backend
      env_file: ./backend/server/server/.env
      build: ./backend/server/.
      volumes:
         - ./backend/server:/app/
         - static_volume:/app/staticfiles
      stdin_open: true
      tty: true
      command: gunicorn --bind :8000 server.wsgi:application
      networks:
         - backend_network

      environment:
         - CHOKIDAR_USEPOLLING=true
         - DJANGO_SETTINGS_MODULE=server.local_settings

      depends_on:
         - db
   backend-server:
      container_name: nginx_back
      build:
         context: ./backend/nginx/.
         dockerfile: Dockerfile.dev
      volumes:
         - static_volume:/app/staticfiles
      ports:
         - "8080:80"
      depends_on:
         - backend
      networks:
         - backend_network
   db:
      build: ./mysql
      command: mysqld --character-set-server=utf8mb4 --collation-server=utf8mb4_unicode_ci
      ports:
         - "3306:3306"
      environment:
         MYSQL_ROOT_PASSWORD: root
         MYSQL_DATABASE: clustering
         MYSQL_USER: user
         MYSQL_PASSWORD: password
         TZ: 'Asia/Tokyo'

      volumes:
         - ./mysql_volume:/var/lib/mysql
         - ./sql:/docker-entrypoint-initdb.d
      networks:
         - backend_network   

   frontend:
      image: node:18-alpine3.15
      container_name: niterumachi-frontend
      volumes:
         - ./frontend/frontend:/app/frontend
         - /app/node_modules
      ports:
         - 3000:3000
      working_dir: /app/frontend
      command: npm start
      tty: true
      networks:
         - frontend_network
   frontend-server:
      container_name: nginx_frontend
      build:
         context: ./frontend/nginx/.
         dockerfile: Dockerfile.dev
      ports:
         - "80:80"
      depends_on:
         - frontend
      networks:
         - frontend_network


networks:
   backend_network:
      driver: bridge
   frontend_network:
      driver: bridge   

volumes:
   static_volume:
